"use strict";(self.webpackChunkastrsk_ai_docs=self.webpackChunkastrsk_ai_docs||[]).push([[876],{2032:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"flow/what-is-the-flow","title":"What is the Flow?","description":"Concept","source":"@site/docs/flow/what-is-the-flow.md","sourceDirName":"flow","slug":"/flow/what-is-the-flow","permalink":"/flow/what-is-the-flow","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/flow/what-is-the-flow.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Flow","permalink":"/flow/"},"next":{"title":"Variable Reference","permalink":"/flow/variable-reference"}}');var i=s(4848),r=s(8453);const a={sidebar_position:1},o="What is the Flow?",l={},c=[{value:"Concept",id:"concept",level:2},{value:"Basic Components",id:"basic-components",level:2},{value:"Node",id:"node",level:3},{value:"Edge",id:"edge",level:3},{value:"Context and Variables",id:"context-and-variables",level:2},{value:"Initial Context Setup",id:"initial-context-setup",level:3},{value:"Variable Usage",id:"variable-usage",level:3},{value:"Example",id:"example",level:2},{value:"References",id:"references",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"what-is-the-flow",children:"What is the Flow?"})}),"\n",(0,i.jsx)(n.h2,{id:"concept",children:"Concept"}),"\n",(0,i.jsx)(n.p,{children:"Flow is a structured process in astrsk.ai for systematically handling complex tasks. It breaks down large tasks into smaller units and executes them sequentially to produce final results."}),"\n",(0,i.jsx)(n.h2,{id:"basic-components",children:"Basic Components"}),"\n",(0,i.jsx)(n.h3,{id:"node",children:"Node"}),"\n",(0,i.jsx)(n.p,{children:"A node is the basic execution unit of a flow. Each node is responsible for a specific function or task."}),"\n",(0,i.jsx)(n.p,{children:"Nodes have the following characteristics:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Input"}),": Receives context from the previous node"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Process"}),": Performs unique functions (e.g., text analysis, image processing, data transformation)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Output"}),": Stores processing results as variables in the context and passes them to the next node"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"edge",children:"Edge"}),"\n",(0,i.jsx)(n.p,{children:"An edge is a connection line between nodes. Nodes are executed sequentially according to the edges connected from the start node to the end node."}),"\n",(0,i.jsx)(n.p,{children:"Edges serve the following roles:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Execution Order Definition"}),": Determines when each node will be executed"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Data Flow Control"}),": Determines the path through which context is passed"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"context-and-variables",children:"Context and Variables"}),"\n",(0,i.jsx)(n.p,{children:'Context is a space that stores all data and state information generated during flow execution. It serves as the "memory" of the flow.'}),"\n",(0,i.jsx)(n.h3,{id:"initial-context-setup",children:"Initial Context Setup"}),"\n",(0,i.jsx)(n.p,{children:"Session information is initialized in the context based on the time when the flow is triggered. For example:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Information about character cards included in the session"}),"\n",(0,i.jsx)(n.li,{children:"Previous session history"}),"\n",(0,i.jsx)(n.li,{children:"Activated lorebook entries"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"variable-usage",children:"Variable Usage"}),"\n",(0,i.jsxs)(n.p,{children:["Each node can utilize variables stored in the context using template syntax. Variables can be referenced in the form ",(0,i.jsx)(n.code,{children:"{{variable_name}}"})," and used in node input fields or prompts."]}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"{{char.name}}"}),": The name of the character currently being referenced or taking action in a roleplaying sequence."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"{{user.description}}"}),": The description of the character controlled by the user in a roleplay."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"{{session.entries}}"}),": A list of all retrieved character and plot entries."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.p,{children:"Here's a simple flow example using two agents:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Start Node \u2192 Agent 1 (Input Analysis) \u2192 Agent 2 (Response Generation) \u2192 End Node\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Execution Process:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Start Node"}),": Initial context setup (character information, conversation history, etc.)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Agent 1 (Input Analysis)"}),": Analyzes user input to generate ",(0,i.jsx)(n.code,{children:"{{user_intent}}"})," and ",(0,i.jsx)(n.code,{children:"{{context_summary}}"})," variables"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Agent 2 (Response Generation)"}),": Uses Agent 1's analysis results along with ",(0,i.jsx)(n.code,{children:"{{char.description}}"}),", ",(0,i.jsx)(n.code,{children:"{{char.example_dialog}}"}),", etc. to generate ",(0,i.jsx)(n.code,{children:"{{char_response}}"})," variable"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"End Node"}),": Outputs ",(0,i.jsx)(n.code,{children:"{{char_response}}"})," content as character message"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Context accumulates at each step, and the next node can utilize the results from previous nodes."}),"\n",(0,i.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,i.jsxs)(n.p,{children:["For a complete list of available variables and detailed information about each variable, please refer to the ",(0,i.jsx)(n.a,{href:"/flow/variable-reference",children:"Variable Reference"}),". Here you can find data types, usage methods, and examples for each variable."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var t=s(6540);const i={},r=t.createContext(i);function a(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);