"use strict";(self.webpackChunkastrsk_ai_docs=self.webpackChunkastrsk_ai_docs||[]).push([[66],{6087:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>n,toc:()=>u});const n=JSON.parse('{"id":"flow/node/agent-node/output","title":"Output","description":"You can determine the format in which the agent responds and whether to use streaming.","source":"@site/docs/flow/node/agent-node/output.md","sourceDirName":"flow/node/agent-node","slug":"/flow/node/agent-node/output","permalink":"/astrsk-ai-docs/flow/node/agent-node/output","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/flow/node/agent-node/output.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Parameters","permalink":"/astrsk-ai-docs/flow/node/agent-node/parameters"},"next":{"title":"Preview","permalink":"/astrsk-ai-docs/flow/node/agent-node/preview"}}');var o=s(4848),r=s(8453);const a={sidebar_position:3},i="Output",d={},u=[{value:"Output Format",id:"output-format",level:2},{value:"Structured Output",id:"structured-output",level:3},{value:"Data Type",id:"data-type",level:4},{value:"Text (Response) Output",id:"text-response-output",level:3},{value:"Stream Response",id:"stream-response",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"output",children:"Output"})}),"\n",(0,o.jsx)(t.p,{children:"You can determine the format in which the agent responds and whether to use streaming."}),"\n",(0,o.jsx)(t.h2,{id:"output-format",children:"Output Format"}),"\n",(0,o.jsx)(t.h3,{id:"structured-output",children:"Structured Output"}),"\n",(0,o.jsx)(t.p,{children:"Makes the agent respond in a specific structured format. The model generates responses based on the name, type, and description of each field you define. This ensures consistent, parseable output that can be easily processed by other systems or used in subsequent flow nodes."}),"\n",(0,o.jsx)(t.h4,{id:"data-type",children:"Data Type"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"String"}),": Text values. Used for any textual content like character actions, dialogue, or narration."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"Integer"}),": Whole numbers without decimal points (e.g., 1, 42, -5). Useful for counts, IDs, or rankings."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"Number"}),": Numeric values including decimals (e.g., 3.14, 2.5, -1.75). Used for measurements, scores, or calculations."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"Boolean"}),": True or false values. Used for yes/no questions, flags, or binary states."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"Enum"}),": A predefined set of specific values to choose from. Ensures the model selects only from allowed options, providing better control over possible outputs."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"* (Array)"}),": A list of items of the specified type. Can contain multiple values of any other data type (e.g., array of strings, array of numbers)."]}),"\n"]}),"\n",(0,o.jsx)(t.h3,{id:"text-response-output",children:"Text (Response) Output"}),"\n",(0,o.jsxs)(t.p,{children:["Generates the model's response as free-form text based on the context input through the prompt. For Chat completion, it generates an ",(0,o.jsx)(t.code,{children:"assistant"})," message, and for Text completion, it continues the input text."]}),"\n",(0,o.jsxs)(t.p,{children:["The model's response is stored as a variable with a prefix that converts the agent's name to ",(0,o.jsx)(t.code,{children:"snake_case"}),". For example, if the agent name is ",(0,o.jsx)(t.code,{children:"Test"}),", the response is stored in the ",(0,o.jsx)(t.code,{children:"test.response"})," variable. This format is ideal when you need natural, unstructured text output."]}),"\n",(0,o.jsx)(t.h2,{id:"stream-response",children:"Stream Response"}),"\n",(0,o.jsx)(t.p,{children:"Determines whether to receive responses in streaming format as generation begins, or to receive them all at once after generation is complete."}),"\n",(0,o.jsx)(t.p,{children:"Streaming provides real-time updates as the model generates text, offering better user experience and responsiveness. However, some providers may filter content during streaming and stop the response mid-generation. Non-streaming mode waits for the complete response before returning it, which can be more reliable but less responsive. Choose the appropriate method based on your agent's purpose and provider capabilities."})]})}function c(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>a,x:()=>i});var n=s(6540);const o={},r=n.createContext(o);function a(e){const t=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);