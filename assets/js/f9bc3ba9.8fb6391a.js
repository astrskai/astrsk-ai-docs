"use strict";(self.webpackChunkastrsk_ai_docs=self.webpackChunkastrsk_ai_docs||[]).push([[872],{3021:(e,t,n)=>{n.d(t,{A:()=>y});var s=n(6540),r=n(4164),o=n(4718),a=n(8774),i=n(4586);const c=["zero","one","two","few","many","other"];function l(e){return c.filter(t=>e.includes(t))}const d={locale:"en",pluralForms:l(["one","other"]),select:e=>1===e?"one":"other"};function u(){const{i18n:{currentLocale:e}}=(0,i.A)();return(0,s.useMemo)(()=>{try{return function(e){const t=new Intl.PluralRules(e);return{locale:e,pluralForms:l(t.resolvedOptions().pluralCategories),select:e=>t.select(e)}}(e)}catch(t){return console.error(`Failed to use Intl.PluralRules for locale "${e}".\nDocusaurus will fallback to the default (English) implementation.\nError: ${t.message}\n`),d}},[e])}function m(){const e=u();return{selectMessage:(t,n)=>function(e,t,n){const s=e.split("|");if(1===s.length)return s[0];s.length>n.pluralForms.length&&console.error(`For locale=${n.locale}, a maximum of ${n.pluralForms.length} plural forms are expected (${n.pluralForms.join(",")}), but the message contains ${s.length}: ${e}`);const r=n.select(t),o=n.pluralForms.indexOf(r);return s[Math.min(o,s.length-1)]}(n,t,e)}}var h=n(6654),p=n(1312),f=n(1107);const g={cardContainer:"cardContainer_fWXF",cardTitle:"cardTitle_rnsV",cardDescription:"cardDescription_PWke"};var x=n(4848);function j({className:e,href:t,children:n}){return(0,x.jsx)(a.A,{href:t,className:(0,r.A)("card padding--lg",g.cardContainer,e),children:n})}function w({className:e,href:t,icon:n,title:s,description:o}){return(0,x.jsxs)(j,{href:t,className:e,children:[(0,x.jsxs)(f.A,{as:"h2",className:(0,r.A)("text--truncate",g.cardTitle),title:s,children:[n," ",s]}),o&&(0,x.jsx)("p",{className:(0,r.A)("text--truncate",g.cardDescription),title:o,children:o})]})}function v({item:e}){const t=(0,o.Nr)(e),n=function(){const{selectMessage:e}=m();return t=>e(t,(0,p.T)({message:"1 item|{count} items",id:"theme.docs.DocCard.categoryDescription.plurals",description:"The default description for a category card in the generated index about how many items this category includes"},{count:t}))}();return t?(0,x.jsx)(w,{className:e.className,href:t,icon:"\ud83d\uddc3\ufe0f",title:e.label,description:e.description??n(e.items.length)}):null}function k({item:e}){const t=(0,h.A)(e.href)?"\ud83d\udcc4\ufe0f":"\ud83d\udd17",n=(0,o.cC)(e.docId??void 0);return(0,x.jsx)(w,{className:e.className,href:e.href,icon:t,title:e.label,description:e.description??n?.description})}function N({item:e}){switch(e.type){case"link":return(0,x.jsx)(k,{item:e});case"category":return(0,x.jsx)(v,{item:e});default:throw new Error(`unknown item type ${JSON.stringify(e)}`)}}const b={docCardListItem:"docCardListItem_W1sv"};function A({className:e}){const t=(0,o.a4)();return(0,x.jsx)(y,{items:t,className:e})}function C({item:e}){return(0,x.jsx)("article",{className:(0,r.A)(b.docCardListItem,"col col--6"),children:(0,x.jsx)(N,{item:e})})}function y(e){const{items:t,className:n}=e;if(!t)return(0,x.jsx)(A,{...e});const s=(0,o.d1)(t);return(0,x.jsx)("section",{className:(0,r.A)("row",n),children:s.map((e,t)=>(0,x.jsx)(C,{item:e},t))})}},5756:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"flow/node/agent-node/index","title":"Agent node","description":"Agent Name","source":"@site/docs/flow/node/agent-node/index.mdx","sourceDirName":"flow/node/agent-node","slug":"/flow/node/agent-node/","permalink":"/astrsk-ai-docs/flow/node/agent-node/","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/flow/node/agent-node/index.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Start node","permalink":"/astrsk-ai-docs/flow/node/start-node"},"next":{"title":"Prompt","permalink":"/astrsk-ai-docs/flow/node/agent-node/prompt"}}');var r=n(4848),o=n(8453),a=n(3021);const i={sidebar_position:2},c="Agent node",l={},d=[{value:"Agent Name",id:"agent-name",level:2},{value:"Select Model",id:"select-model",level:2},{value:"Agent Panels",id:"agent-panels",level:2}];function u(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",strong:"strong",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"agent-node",children:"Agent node"})}),"\n",(0,r.jsx)(t.h2,{id:"agent-name",children:"Agent Name"}),"\n",(0,r.jsx)(t.p,{children:"The agent's name is primarily used to distinguish between agents. It also serves as a prefix when the agent's output is stored in the context as variables."}),"\n",(0,r.jsxs)(t.p,{children:["When the agent name is converted to a variable prefix, it is transformed to ",(0,r.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Snake_case",children:(0,r.jsx)(t.code,{children:"snake_case"})}),". For example, if the agent's name is ",(0,r.jsx)(t.code,{children:"Test Agent"}),", it becomes ",(0,r.jsx)(t.code,{children:"test_agent"}),"."]}),"\n",(0,r.jsx)(t.h2,{id:"select-model",children:"Select Model"}),"\n",(0,r.jsxs)(t.p,{children:["Configure the model to execute the agent. Available models are displayed based on the providers configured in the ",(0,r.jsx)(t.strong,{children:"[Settings > Providers]"})," screen."]}),"\n",(0,r.jsx)(t.h2,{id:"agent-panels",children:"Agent Panels"}),"\n",(0,r.jsx)(t.p,{children:"You can configure the agent's details in the following panels:"}),"\n",(0,r.jsx)(a.A,{})]})}function m(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>i});var s=n(6540);const r={},o=s.createContext(r);function a(e){const t=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);